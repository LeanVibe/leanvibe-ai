# Pre-commit Configuration for LeanVibe Backend
# Automatic Tier 0 validation (fast feedback loop <60s)
# 
# Install with: pre-commit install
# Run manually: pre-commit run --all-files

repos:
  # Python Code Formatting
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        name: "Format Python code with black"
        language_version: python3
        args: [--config=pyproject.toml]

  # Import Sorting  
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: "Sort Python imports with isort"
        args: [--profile=black, --check-only, --diff]

  # Python Linting
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        name: "Lint Python code with flake8"
        additional_dependencies: [flake8-docstrings, flake8-import-order]
        args: [--max-line-length=88, --extend-ignore=E203,W503]

  # Security Scanning (lightweight)
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: "Security scan with bandit"
        args: [-c, pyproject.toml, --severity-level=medium]
        exclude: ^tests/

  # YAML Validation
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        name: "Validate YAML files"
        args: [-c=.yamllint, --strict]

  # JSON Validation
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-json
        name: "Validate JSON files"
      - id: check-yaml
        name: "Validate YAML syntax"
      - id: check-toml
        name: "Validate TOML files"
      - id: check-merge-conflict
        name: "Check for merge conflicts"
      - id: check-case-conflict
        name: "Check for case conflicts"
      - id: trailing-whitespace
        name: "Remove trailing whitespace"
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
        name: "Fix end of files"
      - id: check-docstring-first
        name: "Check docstring is first"
      - id: check-added-large-files
        name: "Check for large files"
        args: [--maxkb=500]

  # Type Checking (lightweight)
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        name: "Type check with mypy"
        additional_dependencies: [types-requests, types-PyYAML]
        args: [--ignore-missing-imports, --no-strict-optional]
        exclude: ^(tests/|scripts/)

  # Local hooks for custom validation
  - repo: local
    hooks:
      # Fast unit tests (Tier 0)
      - id: tier0-tests
        name: "Run Tier 0 tests (unit + contracts)"
        entry: pytest
        language: system
        args: [-m, "unit or contract", --tb=short, -q, --maxfail=3]
        pass_filenames: false
        stages: [commit]

      # Schema drift detection
      - id: schema-drift
        name: "Check API schema drift"
        entry: python
        language: system
        args: [tools/schema_drift.py, --check]
        files: ^contracts/.*\.(yaml|json)$
        pass_filenames: false

      # Coverage gate (light check)
      - id: coverage-gate
        name: "Coverage gate check"
        entry: python
        language: system
        args: [tools/coverage_gate.py, --min-increase=0]
        pass_filenames: false
        stages: [commit]

  # Commit message validation
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.14.1
    hooks:
      - id: commitizen
        name: "Validate commit message format"
        stages: [commit-msg]

# Global configuration
default_stages: [commit]
fail_fast: false
minimum_pre_commit_version: 3.0.0

# Performance optimization
default_install_hook_types: [pre-commit, commit-msg]

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks
    
    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false