version: '3.8'

services:
  # FastAPI Application
  leanvibe-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: leanvibe-backend
    ports:
      - "8765:8765"
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-leanvibe123}@postgres:5432/leanvibe_production
      
      # Redis Configuration  
      - REDIS_URL=redis://redis:6379/0
      
      # Security Configuration
      - LEANVIBE_SECRET_KEY=${LEANVIBE_SECRET_KEY:-your-super-secret-key-change-this-in-production}
      - LEANVIBE_ENVIRONMENT=production
      
      # Neo4j Configuration
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-neo4j_password}
      
      # Application Configuration
      - LOG_LEVEL=INFO
      - LEANVIBE_API_PORT=8765
      - LEANVIBE_HOST=0.0.0.0
      
      # Feature Flags
      - LEANVIBE_ENABLE_MONITORING=true
      - LEANVIBE_ENABLE_LOGGING=true
      - LEANVIBE_DISABLE_ANALYTICS=false
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - leanvibe-network
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8765/production/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: leanvibe-postgres
    environment:
      - POSTGRES_DB=leanvibe_production
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-leanvibe123}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"  # For development access
    restart: unless-stopped
    networks:
      - leanvibe-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d leanvibe_production"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: leanvibe-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"  # For development access
    restart: unless-stopped
    networks:
      - leanvibe-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5-community
    container_name: leanvibe-neo4j
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-neo4j_password}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_memory_heap_initial__size=256m
      - NEO4J_dbms_memory_heap_max__size=512m
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    restart: unless-stopped
    networks:
      - leanvibe-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD:-neo4j_password}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: leanvibe-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - leanvibe-backend
    restart: unless-stopped
    networks:
      - leanvibe-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and Observability (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: leanvibe-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - leanvibe-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: leanvibe-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - leanvibe-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  leanvibe-network:
    driver: bridge
    name: leanvibe-network