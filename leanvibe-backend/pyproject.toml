[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "leanvibe-backend"
version = "0.1.0"
description = "LeanVibe L3 Coding Agent Backend"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "LeanVibe Team" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "websockets>=12.0",
    "pydantic>=2.5.0",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "python-dotenv>=1.0.0",
    "httpx>=0.25.2",
    "pydantic-ai-slim>=0.0.12",
    "pydantic-ai>=0.3.4",
    "pytest>=8.4.1",
    "tree-sitter>=0.24.0",
    "tree-sitter-python>=0.23.6",
    "tree-sitter-javascript>=0.23.1",
    "tree-sitter-typescript>=0.23.2",
    "neo4j>=5.26.0",
    "networkx>=3.2.1",
    "watchdog>=3.0.0",
    "aiofiles>=23.2.1",
    "jinja2>=3.1.2",
    "qrcode[pil]>=7.4.2",
    "netifaces>=0.11.0",
    "numpy>=2.3.1",
    "torch>=2.7.1",
    "mlx>=0.26.1",
    "chromadb>=1.0.13",
    "transformers>=4.53.0",
    "sentence-transformers>=3.3.1",
    "accelerate>=1.8.1",
    "pytest-asyncio>=1.0.0",
    "aiohttp>=3.9.0",
    "redis>=4.6.0",
]

[project.optional-dependencies]
# MLX dependencies (optional for full AI features)
mlx = [
    "mlx>=0.20.0",
    "mlx-lm>=0.19.0",
    "chromadb>=0.5.23",
    "sentence-transformers>=3.3.1",
    "numpy>=1.24.0",
    "huggingface-hub>=0.25.2",
]
# Development dependencies
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]
# Testing dependencies
test = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.2",
    "websockets>=12.0",
]

[project.urls]
Homepage = "https://github.com/leanvibe-ai/leanvibe-backend"
Repository = "https://github.com/leanvibe-ai/leanvibe-backend"
Documentation = "https://github.com/leanvibe-ai/leanvibe-backend#readme"

[project.scripts]
leanvibe = "app.main:main"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --tb=short"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as asyncio tests",
    "mlx_real_inference: marks tests that require real MLX model inference (slow)",
    "websocket: marks tests that require WebSocket functionality",
    "performance: marks performance benchmark tests",
    "stress: marks stress tests that run high load scenarios",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "tests/*",
    "app/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "torch>=2.7.1",
    "torchvision>=0.22.1",
]
