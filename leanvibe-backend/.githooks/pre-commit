#!/bin/bash
#
# LeanVibe Pre-commit Hook - Tier 0 Quality Gate
# Runs fast quality checks before allowing commit
#

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üîç LeanVibe Pre-commit Quality Gate${NC}"
echo "=================================="

# Get staged files
staged_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(py)$' || true)

if [ -z "$staged_files" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  No Python files staged, skipping quality checks${NC}"
    exit 0
fi

echo -e "${BLUE}üìÅ Checking staged Python files:${NC}"
echo "$staged_files" | sed 's/^/   ‚Ä¢ /'

# Function to run command with timeout and error handling
run_check() {
    local name="$1"
    local command="$2"
    local timeout_sec="${3:-60}"
    
    echo ""
    echo -e "${BLUE}üîÑ $name${NC}"
    
    # Run with timeout
    if timeout $timeout_sec bash -c "$command"; then
        echo -e "${GREEN}‚úÖ $name passed${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $name failed${NC}"
        return 1
    fi
}

# Track start time
start_time=$(date +%s)

# 1. Lint staged files only
echo -e "${BLUE}1. Code Linting${NC}"
lint_failed=0

# Black formatting check on staged files only
if ! echo "$staged_files" | xargs black --check --diff 2>/dev/null; then
    echo -e "${RED}‚ùå Black formatting check failed${NC}"
    echo -e "${YELLOW}üí° Run 'black $staged_files' or 'make format' to fix${NC}"
    lint_failed=1
fi

# isort import sorting check on staged files only  
if ! echo "$staged_files" | xargs isort --check-only --diff 2>/dev/null; then
    echo -e "${RED}‚ùå Import sorting check failed${NC}"
    echo -e "${YELLOW}üí° Run 'isort $staged_files' or 'make format' to fix${NC}"
    lint_failed=1
fi

# flake8 style check on staged files only
if ! echo "$staged_files" | xargs flake8 2>/dev/null; then
    echo -e "${RED}‚ùå flake8 style check failed${NC}"
    echo -e "${YELLOW}üí° Fix style issues or run 'make fix' for auto-fixes${NC}"
    lint_failed=1
fi

if [ $lint_failed -eq 1 ]; then
    echo -e "${RED}‚ùå Linting failed - commit blocked${NC}"
    echo -e "${YELLOW}üí° Quick fix: run 'make fix' then re-commit${NC}"
    exit 1
fi

# 2. Type checking (fast, critical errors only)
run_check "Type checking" "mypy app/ --ignore-missing-imports --no-error-summary --show-error-codes" 20

# 3. Contract validation
if [ -f "tools/schema_drift.py" ]; then
    run_check "Schema drift check" "python tools/schema_drift.py --check" 10
fi

# 4. Fast unit tests only
run_check "Unit tests" "python -m pytest -m 'unit' --maxfail=3 --tb=short -q --disable-warnings" 45

# 5. Quality ratchet check (non-enforcing for pre-commit)
if [ -f "tools/quality_ratchet.py" ]; then
    echo ""
    echo -e "${BLUE}üéØ Quality Ratchet Check${NC}"
    if python tools/quality_ratchet.py --no-record; then
        echo -e "${GREEN}‚úÖ Quality ratchet check passed${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Quality ratchet check failed (warning only for pre-commit)${NC}"
    fi
fi

# Calculate elapsed time
end_time=$(date +%s)
duration=$((end_time - start_time))

echo ""
echo "=================================="
if [ $duration -le 60 ]; then
    echo -e "${GREEN}üéâ Pre-commit checks passed in ${duration}s! Ready to commit.${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Pre-commit checks passed but took ${duration}s (target: <60s)${NC}"
    echo -e "${YELLOW}üí° Consider optimizing slow tests or moving to integration tier${NC}"
fi

exit 0