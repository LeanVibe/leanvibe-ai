#!/bin/bash
#
# LeanVibe Commit Message Hook - Conventional Commit Validation
# Ensures commit messages follow conventional commit format
#

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

commit_msg_file="$1"
commit_msg=$(cat "$commit_msg_file")

# Skip validation for merge commits
if echo "$commit_msg" | grep -q "^Merge "; then
    echo -e "${BLUE}🔄 Merge commit detected, skipping validation${NC}"
    exit 0
fi

# Skip validation for revert commits  
if echo "$commit_msg" | grep -q "^Revert "; then
    echo -e "${BLUE}🔄 Revert commit detected, skipping validation${NC}"
    exit 0
fi

# Conventional commit pattern
# type(scope): description
# 
# Optional body
#
# Optional footer
conventional_pattern="^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\(.+\))?: .{1,50}"

echo -e "${BLUE}📝 Validating commit message format${NC}"

# Extract first line for validation
first_line=$(echo "$commit_msg" | head -n1)

if echo "$first_line" | grep -qE "$conventional_pattern"; then
    echo -e "${GREEN}✅ Commit message follows conventional format${NC}"
    
    # Additional validations
    length=${#first_line}
    if [ $length -gt 72 ]; then
        echo -e "${YELLOW}⚠️  Commit subject is $length chars (recommended: <72)${NC}"
    fi
    
    # Check for imperative mood (simple check)
    if echo "$first_line" | grep -qE "(added|fixed|changed|updated|removed)"; then
        echo -e "${YELLOW}⚠️  Consider using imperative mood (add, fix, change, update, remove)${NC}"
    fi
    
    exit 0
else
    echo -e "${RED}❌ Invalid commit message format${NC}"
    echo ""
    echo -e "${YELLOW}Expected format:${NC}"
    echo "  type(scope): description"
    echo ""
    echo -e "${YELLOW}Valid types:${NC}"
    echo "  • feat:     New feature"
    echo "  • fix:      Bug fix"
    echo "  • docs:     Documentation changes"
    echo "  • style:    Code style changes (formatting, etc.)"
    echo "  • refactor: Code refactoring"
    echo "  • perf:     Performance improvements"
    echo "  • test:     Adding or updating tests"
    echo "  • build:    Build system changes"
    echo "  • ci:       CI/CD changes"
    echo "  • chore:    Maintenance tasks"
    echo "  • revert:   Reverting previous commit"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo "  feat(api): add user authentication endpoint"
    echo "  fix(websocket): handle connection timeout gracefully"
    echo "  docs: update API documentation for v2.0"
    echo "  test(integration): add WebSocket connection tests"
    echo "  refactor(core): simplify error handling logic"
    echo ""
    echo -e "${YELLOW}Your commit message:${NC}"
    echo "  $first_line"
    echo ""
    echo -e "${RED}Please update your commit message and try again.${NC}"
    echo -e "${BLUE}Tip: Use 'git commit --amend' to edit the message${NC}"
    
    exit 1
fi