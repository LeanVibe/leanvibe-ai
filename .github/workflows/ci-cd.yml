name: LeanVibe CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Backend Testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: leanvibe_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      working-directory: leanvibe-backend
      run: |
        python -m pip install --upgrade pip
        pip install -r ci-requirements.txt

    - name: Set up test environment (SQLite)
      working-directory: leanvibe-backend
      run: |
        echo "Using SQLite for tests"
        echo "LEANVIBE_ENV=test" >> $GITHUB_ENV
        echo "LEANVIBE_DATABASE_URL=sqlite+aiosqlite:///./leanvibe_test_ci.db" >> $GITHUB_ENV
        echo "LEANVIBE_SECRET_KEY=test_secret_key" >> $GITHUB_ENV

    - name: Run focused backend tests
      working-directory: leanvibe-backend
      env:
        LEANVIBE_DATABASE_URL: sqlite+aiosqlite:///./leanvibe_test_ci.db
        LEANVIBE_SECRET_KEY: test_secret_key
      run: |
        pytest -q it_light --cov=app --cov-branch --cov-report=term --cov-report=xml:coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./leanvibe-backend/coverage.xml
        flags: backend
        name: backend-coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./leanvibe-backend/coverage.xml
        flags: backend
        name: backend-coverage

  # CLI Testing
  cli-test:
    name: CLI Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      working-directory: leanvibe-cli
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov
    
    - name: Run CLI tests
      working-directory: leanvibe-cli
      run: |
        python -m pytest tests/ -v --cov=leanvibe_cli --cov-report=xml --cov-report=term
      env:
        PYTHONPATH: ${{ github.workspace }}/leanvibe-cli

  # iOS Testing
  ios-test:
    name: iOS Tests
    runs-on: macos-latest
    continue-on-error: true
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.4'
    
    - name: Cache Swift packages
      uses: actions/cache@v3
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/.cache/org.swift.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Build iOS app
      run: |
        cd leanvibe-ios
        xcodebuild clean build \
          -project LeanVibe.xcodeproj \
          -scheme LeanVibe \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
          CODE_SIGNING_ALLOWED=NO
    
    - name: Run iOS tests
      run: |
        cd leanvibe-ios
        xcodebuild test \
          -project LeanVibe.xcodeproj \
          -scheme LeanVibe \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
          CODE_SIGNING_ALLOWED=NO
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: ios-test-results
        path: |
          ~/Library/Developer/Xcode/DerivedData/**/Logs/Test/*.xcresult

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit safety
    
    - name: Run Black (formatting)
      run: |
        black --check --diff leanvibe-backend/app leanvibe-cli/leanvibe_cli
    
    - name: Run isort (import sorting)
      run: |
        isort --check-only --diff leanvibe-backend/app leanvibe-cli/leanvibe_cli
    
    - name: Run flake8 (linting)
      run: |
        flake8 leanvibe-backend/app leanvibe-cli/leanvibe_cli
    
    - name: Run mypy (type checking)
      run: |
        mypy leanvibe-backend/app leanvibe-cli/leanvibe_cli
      continue-on-error: true  # Type checking can be strict
    
    - name: Run bandit (security linting)
      run: |
        bandit -r leanvibe-backend/app leanvibe-cli/leanvibe_cli
    
    - name: Check dependencies for security issues
      run: |
        if [ -f leanvibe-backend/requirements.txt ]; then safety check --file leanvibe-backend/requirements.txt; else echo "No backend requirements.txt"; fi
        if [ -f leanvibe-cli/requirements.txt ]; then safety check --file leanvibe-cli/requirements.txt; else echo "No CLI requirements.txt"; fi

  # Build and Push Docker Images (for main branch only)
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [backend-test, cli-test, ios-test, security-scan, code-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata (tags, labels) for backend
      id: meta-backend
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./leanvibe-backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Extract metadata for CLI
      id: meta-cli
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cli
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push CLI Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./leanvibe-cli
        push: true
        tags: ${{ steps.meta-cli.outputs.tags }}
        labels: ${{ steps.meta-cli.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging with Blue/Green Strategy
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config
    
    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
    
    - name: Deploy backend with blue/green strategy
      run: |
        echo "🚀 Deploying backend to staging with blue/green strategy..."
        
        # Update deployment with new image
        kubectl set image deployment/leanvibe-backend-staging \
          backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }} \
          --namespace=leanvibe-staging
        
        # Wait for rollout to complete
        kubectl rollout status deployment/leanvibe-backend-staging --namespace=leanvibe-staging --timeout=600s
        
        echo "✅ Backend deployment completed"
    
    - name: Deploy CLI with blue/green strategy  
      run: |
        echo "🚀 Deploying CLI to staging..."
        
        # Update deployment with new image
        kubectl set image deployment/leanvibe-cli-staging \
          cli=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cli:${{ github.sha }} \
          --namespace=leanvibe-staging
        
        # Wait for rollout to complete
        kubectl rollout status deployment/leanvibe-cli-staging --namespace=leanvibe-staging --timeout=300s
        
        echo "✅ CLI deployment completed"
    
    - name: Run comprehensive health checks
      run: |
        echo "🔍 Running comprehensive health checks..."
        
        # Get service endpoints
        BACKEND_URL=$(kubectl get service leanvibe-backend-staging --namespace=leanvibe-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Wait for services to be ready
        sleep 30
        
        # Health check endpoints
        curl -f "http://${BACKEND_URL}:8000/health" || exit 1
        curl -f "http://${BACKEND_URL}:8000/production/health/detailed" || exit 1
        
        # Performance check
        response_time=$(curl -o /dev/null -s -w "%{time_total}" "http://${BACKEND_URL}:8000/health")
        if (( $(echo "$response_time > 2.0" | bc -l) )); then
          echo "❌ Health check response time too high: ${response_time}s"
          exit 1
        fi
        
        echo "✅ All health checks passed (${response_time}s response time)"
    
    - name: Run integration tests on staging
      run: |
        echo "🧪 Running integration tests on staging environment..."
        
        cd leanvibe-backend
        pip install pytest pytest-asyncio requests
        
        # Set staging environment variables
        export STAGING_BACKEND_URL="http://${BACKEND_URL}:8000"
        export LEANVIBE_ENV=staging
        
        # Run integration tests against staging
        python -m pytest tests/integration/ -v --tb=short
        
        echo "✅ Integration tests passed"
    
    - name: Notify deployment success
      run: |
        echo "✅ Staging deployment successful"
        echo "Environment: staging"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Backend Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}"
        echo "CLI Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-cli:${{ github.sha }}"
    
    - name: Rollback on failure
      if: failure()
      run: |
        echo "❌ Deployment failed, initiating rollback..."
        
        # Rollback to previous version
        kubectl rollout undo deployment/leanvibe-backend-staging --namespace=leanvibe-staging
        kubectl rollout undo deployment/leanvibe-cli-staging --namespace=leanvibe-staging
        
        # Wait for rollback to complete
        kubectl rollout status deployment/leanvibe-backend-staging --namespace=leanvibe-staging
        kubectl rollout status deployment/leanvibe-cli-staging --namespace=leanvibe-staging
        
        echo "✅ Rollback completed"
        exit 1

  # Create Release (for main branch with tags)
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation
        echo "## Changes" > CHANGELOG.md
        git log --pretty=format:"* %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

  # Notification
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [backend-test, cli-test, ios-test, security-scan, code-quality]
    if: always()
    
    steps:
    - name: Determine overall status
      id: status
      run: |
        if [[ "${{ needs.backend-test.result }}" == "success" && 
              "${{ needs.cli-test.result }}" == "success" && 
              "${{ needs.ios-test.result }}" == "success" && 
              "${{ needs.security-scan.result }}" == "success" && 
              "${{ needs.code-quality.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "emoji=✅" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "emoji=❌" >> $GITHUB_OUTPUT
        fi
    
    - name: Send notification
      run: |
        echo "${{ steps.status.outputs.emoji }} CI/CD Pipeline completed"
        echo "Status: ${{ steps.status.outputs.status }}"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Actor: ${{ github.actor }}"
        # Add actual notification logic here (Slack, Discord, etc.)