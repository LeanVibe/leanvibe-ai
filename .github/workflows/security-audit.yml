name: Security Audit & Compliance

on:
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Comprehensive security scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep
        
        # Install additional security tools
        wget -qO- https://github.com/securecodewarrior/github-action-add-sarif/releases/latest/download/sarif-multitool-linux-amd64 > sarif-multitool
        chmod +x sarif-multitool
        sudo mv sarif-multitool /usr/local/bin/
    
    - name: Run Bandit security linting
      run: |
        echo "üîí Running Bandit security analysis..."
        bandit -r leanvibe-backend/app leanvibe-cli/leanvibe_cli \
          -f json -o bandit-report.json \
          -ll -i || true
        
        # Convert to SARIF format
        bandit -r leanvibe-backend/app leanvibe-cli/leanvibe_cli \
          -f sarif -o bandit-results.sarif \
          -ll -i || true
    
    - name: Run Safety (dependency vulnerability check)
      run: |
        echo "üîç Checking for known vulnerabilities in dependencies..."
        
        # Check backend dependencies
        cd leanvibe-backend
        safety check --json --output safety-backend.json || true
        cd ..
        
        # Check CLI dependencies  
        cd leanvibe-cli
        safety check --json --output safety-cli.json || true
        cd ..
        
        # Combine reports
        echo "Backend vulnerabilities:" > safety-combined.txt
        python3 -c "
        import json
        try:
            with open('leanvibe-backend/safety-backend.json') as f:
                data = json.load(f)
                for vuln in data:
                    print(f'- {vuln[\"package\"]} {vuln[\"installed_version\"]}: {vuln[\"vulnerability\"]}')
        except: pass
        " >> safety-combined.txt
        
        echo "CLI vulnerabilities:" >> safety-combined.txt
        python3 -c "
        import json
        try:
            with open('leanvibe-cli/safety-cli.json') as f:
                data = json.load(f)
                for vuln in data:
                    print(f'- {vuln[\"package\"]} {vuln[\"installed_version\"]}: {vuln[\"vulnerability\"]}')
        except: pass
        " >> safety-combined.txt
    
    - name: Run Semgrep security analysis
      run: |
        echo "üîé Running Semgrep security analysis..."
        semgrep --config=auto --json --output=semgrep-results.json \
          leanvibe-backend/app leanvibe-cli/leanvibe_cli || true
        
        # Convert to SARIF
        semgrep --config=auto --sarif --output=semgrep-results.sarif \
          leanvibe-backend/app leanvibe-cli/leanvibe_cli || true
    
    - name: Docker security scan with Trivy
      run: |
        echo "üê≥ Scanning Docker images for vulnerabilities..."
        
        # Install Trivy
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
        # Scan backend Dockerfile
        trivy fs --format sarif --output trivy-backend.sarif leanvibe-backend/
        trivy fs --format json --output trivy-backend.json leanvibe-backend/
        
        # Scan CLI Dockerfile
        trivy fs --format sarif --output trivy-cli.sarif leanvibe-cli/
        trivy fs --format json --output trivy-cli.json leanvibe-cli/
    
    - name: Run secret detection
      run: |
        echo "üïµÔ∏è Scanning for secrets and sensitive data..."
        
        # Install truffleHog
        curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
        
        # Scan repository for secrets
        trufflehog git --json . > trufflehog-results.json || true
        
        # Check for common secret patterns
        grep -r -E "(password|passwd|pwd|secret|key|token|api_key)" \
          --include="*.py" --include="*.yaml" --include="*.yml" \
          --exclude-dir=.git --exclude-dir=venv --exclude-dir=node_modules \
          . > potential-secrets.txt || true
    
    - name: Analyze security scan results
      run: |
        echo "üìä Analyzing security scan results..."
        
        python3 << EOF
        import json
        import os
        
        # Count vulnerabilities by severity
        critical_count = 0
        high_count = 0
        medium_count = 0
        low_count = 0
        
        # Analyze Bandit results
        try:
            with open('bandit-report.json') as f:
                bandit_data = json.load(f)
                for result in bandit_data.get('results', []):
                    severity = result.get('issue_severity', '').lower()
                    if severity == 'high':
                        critical_count += 1
                    elif severity == 'medium':
                        high_count += 1
                    else:
                        medium_count += 1
        except: pass
        
        # Analyze Safety results
        try:
            with open('leanvibe-backend/safety-backend.json') as f:
                safety_data = json.load(f)
                high_count += len(safety_data)
        except: pass
        
        try:
            with open('leanvibe-cli/safety-cli.json') as f:
                safety_data = json.load(f)
                high_count += len(safety_data)
        except: pass
        
        # Analyze Trivy results
        for trivy_file in ['trivy-backend.json', 'trivy-cli.json']:
            try:
                with open(trivy_file) as f:
                    trivy_data = json.load(f)
                    for result in trivy_data.get('Results', []):
                        for vuln in result.get('Vulnerabilities', []):
                            severity = vuln.get('Severity', '').lower()
                            if severity == 'critical':
                                critical_count += 1
                            elif severity == 'high':
                                high_count += 1
                            elif severity == 'medium':
                                medium_count += 1
                            else:
                                low_count += 1
            except: pass
        
        # Write summary
        with open('security-summary.txt', 'w') as f:
            f.write(f"Critical: {critical_count}\\n")
            f.write(f"High: {high_count}\\n")
            f.write(f"Medium: {medium_count}\\n")
            f.write(f"Low: {low_count}\\n")
            f.write(f"Total: {critical_count + high_count + medium_count + low_count}\\n")
        
        print(f"Security scan completed:")
        print(f"Critical: {critical_count}")
        print(f"High: {high_count}")
        print(f"Medium: {medium_count}")
        print(f"Low: {low_count}")
        
        # Fail if critical vulnerabilities found
        if critical_count > 0:
            print(f"‚ùå {critical_count} critical vulnerabilities found!")
            exit(1)
        elif high_count > 10:
            print(f"‚ö†Ô∏è {high_count} high-severity vulnerabilities found!")
            print("Consider addressing these before production deployment.")
            exit(1)
        else:
            print("‚úÖ No critical vulnerabilities found")
        EOF
    
    - name: Upload security scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: |
          bandit-results.sarif
          semgrep-results.sarif
          trivy-backend.sarif
          trivy-cli.sarif
    
    - name: Upload security artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          *.json
          *.sarif
          *.txt
        retention-days: 30

  # SSL/TLS and certificate validation
  ssl-tls-check:
    name: SSL/TLS Certificate Validation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check SSL certificate expiration
      run: |
        echo "üîê Checking SSL certificate status..."
        
        # List of domains to check (replace with actual domains)
        DOMAINS=(
          "api.leanvibe.app"
          "staging-api.leanvibe.app"
          "leanvibe.app"
        )
        
        for domain in "${DOMAINS[@]}"; do
          echo "Checking $domain..."
          
          # Check if domain resolves and has SSL
          if timeout 10 openssl s_client -connect $domain:443 -servername $domain < /dev/null 2>/dev/null; then
            # Get certificate expiration date
            expiry=$(echo | openssl s_client -connect $domain:443 -servername $domain 2>/dev/null | openssl x509 -noout -dates | grep notAfter | cut -d= -f2)
            expiry_epoch=$(date -d "$expiry" +%s 2>/dev/null || echo "0")
            current_epoch=$(date +%s)
            days_until_expiry=$(( (expiry_epoch - current_epoch) / 86400 ))
            
            echo "$domain certificate expires on: $expiry"
            echo "Days until expiry: $days_until_expiry"
            
            if [ $days_until_expiry -lt 30 ]; then
              echo "‚ö†Ô∏è Certificate for $domain expires in less than 30 days!"
              echo "certificate_warning=true" >> $GITHUB_ENV
            fi
            
            if [ $days_until_expiry -lt 7 ]; then
              echo "‚ùå Certificate for $domain expires in less than 7 days!"
              echo "certificate_critical=true" >> $GITHUB_ENV
            fi
            
            # Check certificate chain and security
            echo | openssl s_client -connect $domain:443 -servername $domain 2>/dev/null | openssl x509 -noout -text | grep -E "(Signature Algorithm|Public Key Algorithm|Key Size)"
            
          else
            echo "‚ö†Ô∏è Unable to connect to $domain or no SSL certificate"
          fi
          echo "---"
        done
    
    - name: SSL configuration check
      run: |
        echo "üîß Checking SSL configuration..."
        
        # Check SSL Labs rating (if API available)
        # curl -s "https://api.ssllabs.com/api/v3/analyze?host=leanvibe.app&all=done" | jq '.endpoints[0].grade'
        
        # Check for security headers
        echo "Checking security headers..."
        curl -I https://api.leanvibe.app/ 2>/dev/null | grep -E "(Strict-Transport-Security|Content-Security-Policy|X-Frame-Options|X-Content-Type-Options)" || echo "Some security headers missing"
    
    - name: Notify certificate expiration
      if: env.certificate_warning == 'true'
      run: |
        echo "üìß Sending certificate expiration notification..."
        
        curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
          -H 'Content-type: application/json' \
          --data '{
            "text": "üîê SSL Certificate Expiration Warning",
            "attachments": [
              {
                "color": "warning",
                "fields": [
                  {"title": "Status", "value": "Certificate expiring soon", "short": false},
                  {"title": "Action Required", "value": "Review and renew SSL certificates", "short": false}
                ]
              }
            ]
          }' || echo "Notification failed"
    
    - name: Fail on critical certificate issues
      if: env.certificate_critical == 'true'
      run: |
        echo "‚ùå Critical certificate issue detected"
        exit 1

  # Compliance and audit logging
  compliance-audit:
    name: Compliance Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: GDPR compliance check
      run: |
        echo "üìã Checking GDPR compliance..."
        
        # Check for privacy policy and data handling
        find . -name "*.py" -exec grep -l -i "personal.*data\|privacy\|gdpr\|consent" {} \; > gdpr-references.txt
        find . -name "*.md" -exec grep -l -i "privacy.*policy\|data.*protection\|gdpr" {} \; >> gdpr-references.txt
        
        if [ -s gdpr-references.txt ]; then
          echo "‚úÖ GDPR references found in codebase"
          cat gdpr-references.txt
        else
          echo "‚ö†Ô∏è No GDPR references found - ensure privacy compliance"
        fi
    
    - name: Security logging audit
      run: |
        echo "üìù Auditing security logging..."
        
        # Check for security-related logging
        find . -name "*.py" -exec grep -l -i "log.*security\|log.*auth\|log.*login\|audit.*log" {} \; > security-logging.txt
        
        if [ -s security-logging.txt ]; then
          echo "‚úÖ Security logging found"
          echo "Security logging files:"
          cat security-logging.txt
        else
          echo "‚ö†Ô∏è Limited security logging detected"
        fi
        
        # Check for sensitive data in logs
        find . -name "*.py" -exec grep -H -i "log.*password\|log.*token\|log.*key\|print.*password" {} \; > sensitive-logging.txt || true
        
        if [ -s sensitive-logging.txt ]; then
          echo "‚ùå Potential sensitive data logging detected:"
          cat sensitive-logging.txt
          exit 1
        else
          echo "‚úÖ No obvious sensitive data logging found"
        fi
    
    - name: Generate compliance report
      run: |
        echo "üìä Generating compliance report..."
        
        cat > compliance-report.md << EOF
        # Security Compliance Report
        
        **Generated:** $(date)
        **Commit:** ${{ github.sha }}
        **Branch:** ${{ github.ref_name }}
        
        ## Security Scans
        - ‚úÖ Bandit static analysis
        - ‚úÖ Safety dependency check
        - ‚úÖ Semgrep security rules
        - ‚úÖ Trivy container scanning
        - ‚úÖ Secret detection
        
        ## SSL/TLS Status
        - Certificate expiration monitoring: Active
        - Security headers: Configured
        - HTTPS enforcement: Enabled
        
        ## Compliance Checks
        - GDPR references: $([ -s gdpr-references.txt ] && echo "Found" || echo "Review needed")
        - Security logging: $([ -s security-logging.txt ] && echo "Implemented" || echo "Enhance needed")
        - Sensitive data handling: $([ -s sensitive-logging.txt ] && echo "Issues found" || echo "Clean")
        
        ## Next Steps
        - Review security scan results
        - Update dependencies with vulnerabilities
        - Renew certificates within 30 days of expiration
        - Ensure GDPR compliance documentation is current
        EOF
        
        echo "Compliance report generated"
    
    - name: Upload compliance artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: compliance-audit-results
        path: |
          compliance-report.md
          *.txt
        retention-days: 90